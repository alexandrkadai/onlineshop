1.Text for pages about in two languages 
2. Prototype of clothes
3. Prices 
w

1. Create Redux Actions, Reducers, and Store
Create an action type:

typescript
Copy code
// actions.ts

export const INCREMENT = 'INCREMENT';
export const DECREMENT = 'DECREMENT';

interface IncrementAction {
  type: typeof INCREMENT;
}

interface DecrementAction {
  type: typeof DECREMENT;
}

export type ActionTypes = IncrementAction | DecrementAction;
Create a reducer:

typescript
Copy code
// reducer.ts

import { ActionTypes, INCREMENT, DECREMENT } from './actions';

interface CounterState {
  count: number;
}

const initialState: CounterState = {
  count: 0,
};

const counterReducer = (state = initialState, action: ActionTypes): CounterState => {
  switch (action.type) {
    case INCREMENT:
      return { ...state, count: state.count + 1 };
    case DECREMENT:
      return { ...state, count: state.count - 1 };
    default:
      return state;
  }
};

export default counterReducer;
Create the Redux store:

typescript
Copy code
// store.ts

import { createStore } from 'redux';
import counterReducer from './reducer';

const store = createStore(counterReducer);

export default store;
2. Create React Components
Now, let's create a React component to interact with the Redux store:

typescript
Copy code
// Counter.tsx

import React from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { ActionTypes, INCREMENT, DECREMENT } from './actions';
import { RootState } from './types'; // Define RootState with your specific state types

const Counter: React.FC = () => {
  const count = useSelector((state: RootState) => state.count);
  const dispatch = useDispatch();

  const handleIncrement = () => {
    const action: ActionTypes = { type: INCREMENT };
    dispatch(action);
  };

  const handleDecrement = () => {
    const action: ActionTypes = { type: DECREMENT };
    dispatch(action);
  };

  return (
    <div>
      <h1>Counter: {count}</h1>
      <button onClick={handleIncrement}>Increment</button>
      <button onClick={handleDecrement}>Decrement</button>
    </div>
  );
};

export default Counter;
3. Create Root Component
Finally, create your root component where you'll wrap your app with the Redux Provider:

typescript
Copy code
// App.tsx

import React from 'react';
import { Provider } from 'react-redux';
import store from './store';
import Counter from './Counter';

const App: React.FC = () => {
  return (
    <Provider store={store}>
      <div className="App">
        <Counter />
      </div>
    </Provider>
  );
};

export default App;
Ensure that your RootState in Counter.tsx matches your actual Redux store state structure for TypeScript type safety.

This example demonstrates the basic setup of Redux in a TypeScript React app, handling a simple counter state. You can expand upon this structure to manage more complex states and actions within your application.





